function [cropImage, dataTrialArray, nFrames] = pupilAnalysis(howManyPlot, displayPlot, createPlot, dFldr, tifFiles, trialNumber, minX, maxX, minY, maxY)
%PUPILANALYSIS Summary of this function goes here
%   Detailed explanation goes here
%     mkdir(dFldr, folderName);
%     disp(['Pupil Analysis Trial ', num2str(trialNumber)])
    %if ~isempty(iTOI)
    %Pupil file info
    %pupilFile = strtrim([dFldr cFNames{iTOI}]);
    fileName = strtrim(tifFiles{trialNumber});
    pupilFile = fullfile(dFldr, fileName);

    pupilInfo = imfinfo(pupilFile);
    nFrames = size(pupilInfo,1);

    
    dataTrialArray = cell(nFrames, 1);
    
    
    % initialize output Figures folder % (can be broken into own file, if needed)
%     if ~exist(fullfile(dFldr, 'Figures'),'dir')
%         mkdir 'Figures'
%     end
    
    tifFileName = sprintf('Trial_%d.tif', trialNumber);
    fullFileName = fullfile(dFldr, 'Figures', tifFileName);
    if exist(fullFileName, 'file')
        delete(fullFileName)
    end
    % end of initialization %
   
    
    for frameNumber = 1:nFrames
        % Load and crop the image from the current frame
        fullImage = imread(pupilFile,frameNumber);
        cropImage=fullImage([minY:maxY], [minX:maxX]);
        cropImage=rgb2gray(cropImage);
        
        
        % Apply greyscale/masking procedures on the cropped image to
        % isolate the single pupil
        skin =~ imbinarize(cropImage,0.05);
        skin = bwmorph(skin,'close');
        skin = bwmorph(skin,'open');
        skin = bwareaopen(skin,200);
        skin = imfill(skin,'holes');
        pupilRegion = skin;

        
        figure(1), hold on
        sizeOfData = size(cropImage)
        for k = 1:sizeOfData(1)
            for j = 1:sizeOfData(2)
                if cropImage(k,j)
            end
        end
        imshow(cropImage,'InitialMagnification','fit');
        
        hold of1f
        
        % To get the properties of the pupilRegion call regionprops
        % This returns an object called pupilProperties which has the
        % following fields:
        % 'Centroid': [pupilCenterXCoordinate, pupilCenterYCoordinate]
        % 'MajorAxisLength': length of the major axis of the pupil ellipse
        % 'MinorAxisLength': length of the minor axis of the pupil ellipse
        % 'Area': the number of pixels in the pupilRegion
        % 'BoundingBox': the closest rectangle to the pupilRegion [x, y, width, height] 
        pupilProperties = regionprops(pupilRegion, 'Centroid','MajorAxisLength','MinorAxisLength', 'Area', 'BoundingBox');
        
        
        % This piece of code checks whether regionprops was able to
        % identify a pupiilRegion
        N = size(pupilProperties,1);
        if N < 1 || isempty(pupilProperties)
            disp(["pupilProperties was empty for Trial ", trialNumber, " Frame ", frameNumber]);  
            continue
        end
        
        dataTrialArray(frameNumber,1) = {pupilProperties(1)};
        
        % Visualization Protocol
        disp(['Pupil Analysis Trial & Frame ', num2str(trialNumber), ' ', num2str(frameNumber)])
        if createPlot == 1
            if howManyPlot > 0
                displayPlot = "on";
                howManyPlot = howManyPlot - 1;
                disp(["How many plots left ", howManyPlot]);
            else
                displayPlot = "off";
            end
            visualizePupilAnalysis(displayPlot, trialNumber, frameNumber, pupilProperties, fullFileName, fullImage, cropImage, skin, minX, maxX, minY, maxY);
        end
    end
end
